substitutions:
  device_name: "weegschaal"
  # up till 8 users can be used
  user_0: Jane
  user_1: Brian

external_components:
  - source: 
      type: local
      path: components

esphome:
  name: ${device_name}
  friendly_name: Weegschaal
  project:
    name: bwynants.$device_name
    version: "0.9.0"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name} Fallback Hotspot
    ap_timeout: 15s

#captive_portal:
    
#web_server:
#  port: 80


medisana_bs444:
    timeoffset: false # BS444 needs timeoffset

sensor:
  - platform: medisana_bs444
    weight_1:
      name: Weight {user_0}
    kcal_1:
      name: kcal {user_0}
    fat_1:
      name: Fat {user_0}
    tbw_1:
      name: Water {user_0}
    muscle_1:
      name: Muscle {user_0}
    bone_1:
      name: Bone {user_0}
    bmi_1:
      name: BMI {user_0}

    weight_2:
      name: Weight {user_1}
    kcal_2:
      name: kcal {user_1}
    fat_2:
      name: Fat {user_1}
    tbw_2:
      name: Water {user_1}
    muscle_2:
      name: Muscle {user_1}
    bone_2:
      name: Bone {user_1}
    bmi_2:
      name: BMI {user_1}

  - platform: uptime
    id: uptime_sensor
    entity_category: diagnostic
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
                 int seconds = round(id(uptime_sensor).raw_state);
                 int days = seconds / (24 * 3600);
                 seconds = seconds % (24 * 3600);
                 int hours = seconds / 3600;
                 seconds = seconds % 3600;
                 int minutes = seconds /  60;
                 seconds = seconds % 60;
                 return (
                   (days ? to_string(days) + "d " : "") +
                   (hours ? to_string(hours) + "h " : "") +
                   (minutes ? to_string(minutes) + "m " : "") +
                   (to_string(seconds) + "s")
                 ).c_str();

  - platform: template
    name: "Free Memory"
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: 'kB'
    state_class: measurement

  - platform: wifi_signal
    name: Wi-Fi Signal
    update_interval: 60s
    entity_category: diagnostic


button:
  # A reboot button is always useful
  - platform: restart
    entity_category: diagnostic
    name: Restart

text_sensor:
  - platform: template
    name: Uptime
    id: uptime_human
    icon: mdi:clock-start
    entity_category: diagnostic

  - platform: wifi_info
    ip_address:
      name: IP Address
      disabled_by_default: true
      entity_category: diagnostic

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Brussels
