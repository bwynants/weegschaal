substitutions:
  device_name: "weegschaal"
  init: 'BS444Scale::instance();'
  # up till 8 users can be used
  user_0: Jane
  user_1: Brian

esphome:
  name: ${device_name}
  friendly_name: Weegschaal
  libraries:
    - "ESP32 BLE Arduino"
  includes:
    - lib/scale/
  project:
    name: bwynants.$device_name
    version: "0.4"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name} Fallback Hotspot
    ap_timeout: 15s

#captive_portal:
    
#web_server:
#  port: 80


custom_component:
- lambda: |-
    auto theBS444Scale = ${init}
    return {theBS444Scale};

sensor:
  - platform: custom
    lambda: |-
      auto theBS444Scale = ${init}
      return {
        theBS444Scale->sensor_weights[0],
        theBS444Scale->sensor_weights[1],
        theBS444Scale->sensor_kcal[0],
        theBS444Scale->sensor_kcal[1],
        theBS444Scale->sensor_fat[0],
        theBS444Scale->sensor_fat[1],
        theBS444Scale->sensor_tbw[0],
        theBS444Scale->sensor_tbw[1],
        theBS444Scale->sensor_muscle[0],
        theBS444Scale->sensor_muscle[1],
        theBS444Scale->sensor_bone[0],
        theBS444Scale->sensor_bone[1],
        theBS444Scale->sensor_bmi[0],
        theBS444Scale->sensor_bmi[1]
      };
    sensors:
      - name: Weight ${user_0}
        icon: mdi:monitor_weight
        unit_of_measurement: kg
        accuracy_decimals: 1
        state_class: measurement
        device_class: weight
      - name: Weight ${user_1}
        icon: mdi:monitor_weight
        unit_of_measurement: kg
        accuracy_decimals: 1
        state_class: measurement
        device_class: weight
      - name: kcal ${user_0}
        icon: mdi:food-apple
        unit_of_measurement: "kcal"
        accuracy_decimals: 1
        state_class: measurement
      - name: kcal ${user_1}
        icon: mdi:food-apple
        unit_of_measurement: "kcal"
        accuracy_decimals: 1
        state_class: measurement
      - name: Fat ${user_0}
        icon: mdi:percent
        unit_of_measurement: "%"
        accuracy_decimals: 1
        state_class: measurement
      - name: Fat ${user_1}
        icon: mdi:percent
        unit_of_measurement: "%"
        accuracy_decimals: 1
        state_class: measurement
      - name: Water ${user_0}
        icon: mdi:water-percent
        unit_of_measurement: "%"
        accuracy_decimals: 1
        state_class: measurement
      - name: Water ${user_1}
        icon: mdi:water-percent
        unit_of_measurement: "%"
        accuracy_decimals: 1
        state_class: measurement
      - name: Muscle ${user_0}
        icon: mdi:percent
        unit_of_measurement: "%"
        accuracy_decimals: 1
        state_class: measurement
      - name: Muscle ${user_1}
        icon: mdi:percent
        unit_of_measurement: "%"
        accuracy_decimals: 1
        state_class: measurement
      - name: Bone ${user_0}
        icon: mdi:percent
        unit_of_measurement: "%"
        accuracy_decimals: 1
        state_class: measurement
      - name: Bone ${user_1}
        icon: mdi:percent
        unit_of_measurement: "%"
        accuracy_decimals: 1
        state_class: measurement
      - name: BMI ${user_0}
        icon: mdi:scale-bathroom
        unit_of_measurement: ""
        accuracy_decimals: 1
        state_class: measurement
      - name: BMI ${user_1}
        icon: mdi:scale-bathroom
        unit_of_measurement: ""
        accuracy_decimals: 1
        state_class: measurement

  - platform: uptime
    id: uptime_sensor
    entity_category: diagnostic
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
                 int seconds = round(id(uptime_sensor).raw_state);
                 int days = seconds / (24 * 3600);
                 seconds = seconds % (24 * 3600);
                 int hours = seconds / 3600;
                 seconds = seconds % 3600;
                 int minutes = seconds /  60;
                 seconds = seconds % 60;
                 return (
                   (days ? to_string(days) + "d " : "") +
                   (hours ? to_string(hours) + "h " : "") +
                   (minutes ? to_string(minutes) + "m " : "") +
                   (to_string(seconds) + "s")
                 ).c_str();

  - platform: template
    name: "Free Memory"
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: 'kB'
    state_class: measurement

  - platform: wifi_signal
    name: Wi-Fi Signal
    update_interval: 60s
    entity_category: diagnostic


button:
  # A reboot button is always useful
  - platform: restart
    entity_category: diagnostic
    name: Restart

text_sensor:
  - platform: template
    name: Uptime
    id: uptime_human
    icon: mdi:clock-start
    entity_category: diagnostic

  - platform: wifi_info
    ip_address:
      name: IP Address
      disabled_by_default: true
      entity_category: diagnostic

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Brussels
